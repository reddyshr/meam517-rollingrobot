function [h,dH] = dynamics_constraints(z, N, nx, nu, dt)
%DYNAMICS_CONSTRAINTS(z) compiles the dynamics constraints generated by
%dynamics_constraint_with_derivative.
%   @param z: vector of decision variables containing the x_i and u_i.
%   @param N: number of sample points
%   @param nx: dimension of state vector, x
%   @param nu: dimension of input vector, u
%   @param dt: \Delta t, the inter-sample interval duration

%   @output h: compiled h_i from dynamics_constraint_with_derivative
%   @output dH_i: compiled dH_i from dynamics_constraint_with_derivative

h = zeros((N-1)*nx, 1);
dH = zeros((N-1)*nx, N*(nx + nu));

for i=1:(N-1)
   % get indices of x_i, u_i, x_ip1, and u_ip1 within z
   % That is, z(x_i_inds) == x_i, etc.
   x_i_inds = (1:nx) + (nx + nu) * (i - 1);
   u_i_inds = (1:nu) + nx * i + nu * (i - 1);
   x_ip1_inds = x_i_inds + nx + nu;
   u_ip1_inds = u_i_inds + nx + nu;
   
   % TODO: call dynamics_constraint_with_derivative
   [h_i, dH_i] = dynamics_constraint_with_derivative( z(x_i_inds), z(u_i_inds), z(x_ip1_inds), z(u_ip1_inds), dt );
   
   % TODO fit h_i and dH_i into h and dH, respectively.
   h_ind = (i-1)*nx+1;
   h(h_ind:(h_ind + nx - 1)) = h_i;
   
   dH_ind_first = (nx + nu)*(i-1) + 1;
   dH_ind_last = dH_ind_first + 2*(nx+nu)-1;
   dH( h_ind:(h_ind + nx - 1) , dH_ind_first:dH_ind_last ) = dH_i;
    
end

end